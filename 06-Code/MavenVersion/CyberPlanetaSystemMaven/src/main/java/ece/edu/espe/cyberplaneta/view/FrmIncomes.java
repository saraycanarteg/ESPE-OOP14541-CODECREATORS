package ece.edu.espe.cyberplaneta.view;

import com.itextpdf.text.DocumentException;
import ec.edu.espe.cyberplaneta.controller.ExcelReport;
import ec.edu.espe.cyberplaneta.controller.PdfReport;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;
import utils.MongoDBUtil;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Saray Cañarte, Code Creators, DCCO-ESPE
 */
public class FrmIncomes extends javax.swing.JFrame {

    /**
     * Creates new form FrmIncomes
     */
    public FrmIncomes() {
        initComponents();
        loadIncomes();

        tblTotalIncomes.setShowGrid(true);
        tblTotalIncomes.setGridColor(Color.LIGHT_GRAY);
        tblTotalIncomes.setRowHeight(25);
        tblTotalIncomes.setIntercellSpacing(new Dimension(0, 0));
        tblTotalIncomes.getTableHeader().setReorderingAllowed(false);
        tblTotalIncomes.getTableHeader().setResizingAllowed(false);
        tblTotalIncomes.setSelectionBackground(new java.awt.Color(159, 246, 70));
        tblTotalIncomes.setSelectionForeground(new java.awt.Color(0, 0, 102));
    }

    private void loadIncomes() {
        DefaultTableModel model = (DefaultTableModel) tblTotalIncomes.getModel();
        model.setRowCount(0);
        List<Document> documents = MongoDBUtil.getAllIncomes();
        float totalSum = 0;
       
        for (Document doc : documents) {
            int id = doc.getInteger("processId");
            String name = doc.getString("processName");
            int numberOfDocumentation = doc.getInteger("numberOfDocumentation");
            float priceBase = doc.getDouble("price").floatValue();
            float taxRate = doc.getDouble("taxRate").floatValue();
            float totalPrice = doc.getDouble("total").floatValue();

        model.addRow(new Object[]{
            id,
            name,
            numberOfDocumentation,
            String.format("%.2f", priceBase),
            String.format("%.2f", taxRate),
            String.format("%.2f", totalPrice)
        });

            totalSum += totalPrice;
        }

        model.addRow(new Object[]{"", "", "TOTAL:", "", "", String.format("%.2f", totalSum)});

        tblTotalIncomes.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                if (row == table.getRowCount() - 1) {
                    c.setBackground(new Color(159, 246, 70)); 
                    c.setForeground(new Color(7, 81, 203)); 
                } else {
                    c.setBackground(Color.WHITE); 
                    c.setForeground(new Color(0, 0, 102)); 
                }
                c.setFont(row == table.getRowCount() - 1 ? c.getFont().deriveFont(Font.BOLD) : table.getFont());
                return c;
            }
        });

   
        tblTotalIncomes.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                c.setBackground(new Color(7, 81, 203)); 
                c.setForeground(Color.WHITE); 
                c.setFont(c.getFont().deriveFont(Font.BOLD));
                return c;
            }
        });
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTotalIncomes = new javax.swing.JTable();
        cmbNumericalOrder = new javax.swing.JComboBox<>();
        cmbAlphabeticalOrder = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        btnGenerateReportExcel = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnGoBackToMain = new javax.swing.JButton();
        btnGenerateReportPdf = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnBuscarActionPerformed = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        tblTotalIncomes.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tblTotalIncomes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre del Proceso", "Número de Documentación", "Precio Base ($)", "Impuesto (%)", "Total ($)"
            }
        ));
        tblTotalIncomes.setFocusable(false);
        tblTotalIncomes.setRowHeight(25);
        tblTotalIncomes.setSelectionBackground(new java.awt.Color(0, 255, 0));
        tblTotalIncomes.setSelectionForeground(new java.awt.Color(0, 0, 153));
        tblTotalIncomes.setShowHorizontalLines(true);
        tblTotalIncomes.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblTotalIncomes);

        cmbNumericalOrder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Orden Numérico", "Mayor a Menor", "Menor a Mayor" }));
        cmbNumericalOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbNumericalOrderActionPerformed(evt);
            }
        });

        cmbAlphabeticalOrder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Orden Alfabético", "A-Z", "Z-A" }));
        cmbAlphabeticalOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAlphabeticalOrderActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(65, 109, 155));
        jLabel2.setText("Ordenar por:");

        btnGenerateReportExcel.setBackground(new java.awt.Color(7, 81, 203));
        btnGenerateReportExcel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnGenerateReportExcel.setForeground(new java.awt.Color(7, 81, 203));
        btnGenerateReportExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-xml-40.png"))); // NOI18N
        btnGenerateReportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateReportExcelActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(7, 81, 203));

        btnGoBackToMain.setBackground(new java.awt.Color(255, 101, 98));
        btnGoBackToMain.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnGoBackToMain.setForeground(new java.awt.Color(255, 255, 255));
        btnGoBackToMain.setText("Regresar");
        btnGoBackToMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoBackToMainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGoBackToMain, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(368, 368, 368))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(btnGoBackToMain)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        btnGenerateReportPdf.setBackground(new java.awt.Color(159, 246, 70));
        btnGenerateReportPdf.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnGenerateReportPdf.setForeground(new java.awt.Color(7, 81, 203));
        btnGenerateReportPdf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-pdf-20 (1).png"))); // NOI18N
        btnGenerateReportPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateReportPdfActionPerformed(evt);
            }
        });

        btnBorrar.setBackground(new java.awt.Color(159, 246, 70));
        btnBorrar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBorrar.setForeground(new java.awt.Color(7, 81, 203));
        btnBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-eliminar-20.png"))); // NOI18N
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnEditar.setBackground(new java.awt.Color(159, 246, 70));
        btnEditar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEditar.setForeground(new java.awt.Color(7, 81, 203));
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-editar-20.png"))); // NOI18N
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnBuscarActionPerformed.setBackground(new java.awt.Color(159, 246, 70));
        btnBuscarActionPerformed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-buscar-20 (1).png"))); // NOI18N
        btnBuscarActionPerformed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 877, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(cmbAlphabeticalOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbNumericalOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBuscarActionPerformed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBorrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGenerateReportPdf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGenerateReportExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGenerateReportPdf)
                    .addComponent(btnGenerateReportExcel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(cmbAlphabeticalOrder)
                        .addComponent(cmbNumericalOrder)
                        .addComponent(btnBorrar)
                        .addComponent(btnEditar)
                        .addComponent(btnBuscarActionPerformed)))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(-5, 104, 920, 400));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(7, 81, 203));
        jLabel1.setText("Ingresos de Cyber Planeta");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 20, 510, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bg2 - copia.jpg"))); // NOI18N
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(-200, 0, -1, 100));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-4, -4, 910, 100));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 910, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGoBackToMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoBackToMainActionPerformed
            FrmMenu frmMenu= new FrmMenu();
            this.setVisible(false);
            frmMenu.setVisible(true);
    }//GEN-LAST:event_btnGoBackToMainActionPerformed

    private void btnGenerateReportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateReportExcelActionPerformed
    ExcelReport excelReport = new ExcelReport();
    
    try {
        excelReport.exportToExcel(tblTotalIncomes); 
    } catch (IOException ex) {
        System.out.println("Error: " + ex);
    }    
    }//GEN-LAST:event_btnGenerateReportExcelActionPerformed

    private void cmbAlphabeticalOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAlphabeticalOrderActionPerformed
                                                
    DefaultTableModel model = (DefaultTableModel) tblTotalIncomes.getModel();
    int columnIndex = 1; 

    if (model.getRowCount() > 1) {
      
        List<Object[]> rowData = new ArrayList<>();
        Object[] totalRow = model.getDataVector().lastElement().toArray(); 
        for (int i = 0; i < model.getRowCount() - 1; i++) {
            Object[] row = new Object[model.getColumnCount()];
            for (int j = 0; j < model.getColumnCount(); j++) {
                row[j] = model.getValueAt(i, j);
            }
            rowData.add(row);
        }

        String selectedOrder = (String) cmbAlphabeticalOrder.getSelectedItem();
        rowData.sort((row1, row2) -> {
            String name1 = (String) row1[columnIndex];
            String name2 = (String) row2[columnIndex];
            
            if (selectedOrder.equals("A-Z")) {
                return name1.compareTo(name2);
            } else if (selectedOrder.equals("Z-A")) {
                return name2.compareTo(name1);
            }
            return 0;
        });
        
        model.setRowCount(0);
        for (Object[] row : rowData) {
            model.addRow(row);
        }
        model.addRow(totalRow);
    }


    }//GEN-LAST:event_cmbAlphabeticalOrderActionPerformed

    private void cmbNumericalOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbNumericalOrderActionPerformed
                                                                                                  
    DefaultTableModel model = (DefaultTableModel) tblTotalIncomes.getModel();
    int columnIndex = 5; 

    if (model.getRowCount() > 1) {
        List<Object[]> rowData = new ArrayList<>();
        Object[] totalRow = new Object[model.getColumnCount()];
        
        if (model.getRowCount() > 0) {
            totalRow = model.getDataVector().get(model.getRowCount() - 1).toArray(); 
        }
        
        for (int i = 0; i < model.getRowCount() - 1; i++) {
            Object[] row = new Object[model.getColumnCount()];
            for (int j = 0; j < model.getColumnCount(); j++) {
                row[j] = model.getValueAt(i, j);
            }
            rowData.add(row);
        }
        
        String selectedOrder = (String) cmbNumericalOrder.getSelectedItem();
        rowData.sort((row1, row2) -> {
            Double value1 = parseDouble(row1[columnIndex]);
            Double value2 = parseDouble(row2[columnIndex]);
            
            if (selectedOrder.equals("Mayor a Menor")) {
                return value2.compareTo(value1); 
            } else if (selectedOrder.equals("Menor a Mayor")) {
                return value1.compareTo(value2); 
            }
            return 0;
        });
           
        model.setRowCount(0);
        for (Object[] row : rowData) {
            model.addRow(row);
        }
        if (totalRow != null) {
            model.addRow(totalRow);
        }
    }


    }//GEN-LAST:event_cmbNumericalOrderActionPerformed

    private void btnGenerateReportPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateReportPdfActionPerformed
                                                 
    PdfReport pdfReport = new PdfReport();
    
    try {
        pdfReport.exportTableToPDF(tblTotalIncomes);
    } catch (IOException | DocumentException ex) {
        System.out.println("Error: " + ex.getMessage());
        ex.printStackTrace();
    }


    }//GEN-LAST:event_btnGenerateReportPdfActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        int selectedRow = tblTotalIncomes.getSelectedRow();
        System.out.println("Fila seleccionada: " + selectedRow);

    if (selectedRow >= 0) {
        int processId = (int) tblTotalIncomes.getValueAt(selectedRow, 0);
        int confirm = JOptionPane.showConfirmDialog(this, 
            "¿Está seguro de borrar este ingreso?", 
            "Confirmar eliminación", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.QUESTION_MESSAGE);

        if (confirm == JOptionPane.YES_OPTION) {
            MongoDBUtil.deleteIncome(processId);
            DefaultTableModel model = (DefaultTableModel) tblTotalIncomes.getModel();
            model.removeRow(selectedRow);
            recalculateTotal(model);
            
            JOptionPane.showMessageDialog(this, "Ingreso eliminado exitosamente.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila para borrar.");
    }
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        int selectedRow = tblTotalIncomes.getSelectedRow();
    
    if (selectedRow >= 0) {
        // Obtener los valores actuales de la fila seleccionada
        int processId = (int) tblTotalIncomes.getValueAt(selectedRow, 0);
        String name = (String) tblTotalIncomes.getValueAt(selectedRow, 1);
        int numberOfDocumentation = (int) tblTotalIncomes.getValueAt(selectedRow, 2);
        float priceBase = Float.parseFloat(tblTotalIncomes.getValueAt(selectedRow, 3).toString().replace(",", "."));
        float taxRate = Float.parseFloat(tblTotalIncomes.getValueAt(selectedRow, 4).toString().replace(",", "."));
        float totalPrice = Float.parseFloat(tblTotalIncomes.getValueAt(selectedRow, 5).toString().replace(",", "."));

        // Mostrar un cuadro de diálogo para editar los valores
        String newName = JOptionPane.showInputDialog(this, "Editar nombre:", name);
        String newNumberOfDocumentation = JOptionPane.showInputDialog(this, "Editar número de documentación:", numberOfDocumentation);
        String newPriceBase = JOptionPane.showInputDialog(this, "Editar precio base:", priceBase);
        String newTaxRate = JOptionPane.showInputDialog(this, "Editar tasa de impuesto:", taxRate);

        // Validar y actualizar los valores
        if (newName != null && newNumberOfDocumentation != null && newPriceBase != null && newTaxRate != null) {
            try {
                numberOfDocumentation = Integer.parseInt(newNumberOfDocumentation);
                priceBase = Float.parseFloat(newPriceBase.replace(",", "."));
                taxRate = Float.parseFloat(newTaxRate.replace(",", "."));

                // Actualizar la tabla
                DefaultTableModel model = (DefaultTableModel) tblTotalIncomes.getModel();
                model.setValueAt(newName, selectedRow, 1);
                model.setValueAt(numberOfDocumentation, selectedRow, 2);
                model.setValueAt(String.format("%.2f", priceBase), selectedRow, 3);
                model.setValueAt(String.format("%.2f", taxRate), selectedRow, 4);
                
                // Calcular el nuevo total y actualizar la base de datos
                float newTotalPrice = priceBase + (priceBase * taxRate / 100); // Ajusta según tu lógica
                model.setValueAt(String.format("%.2f", newTotalPrice), selectedRow, 5);
                
                // Guardar cambios en la base de datos
                boolean success = MongoDBUtil.updateIncome(processId, newName, numberOfDocumentation, priceBase, taxRate, newTotalPrice);
                if (success) {
                    JOptionPane.showMessageDialog(this, "Cambios guardados exitosamente.");
                } else {
                    JOptionPane.showMessageDialog(this, "Error al guardar los cambios.");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese valores válidos.");
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila para editar.");
    }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnBuscarActionPerformedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformedActionPerformed
        String searchTerm = JOptionPane.showInputDialog(this, "Ingrese el término de búsqueda:");
        if (searchTerm != null && !searchTerm.trim().isEmpty()) {
            searchInTable(searchTerm);
    }
}
private void searchInTable(String searchTerm) {
    DefaultTableModel model = (DefaultTableModel) tblTotalIncomes.getModel();
    List<Object[]> foundRows = new ArrayList<>();

    for (int i = 0; i < model.getRowCount(); i++) {
        String name = (String) model.getValueAt(i, 1); // Suponiendo que el nombre está en la columna 1
        if (name.toLowerCase().contains(searchTerm.toLowerCase())) {
            foundRows.add(new Object[]{
                model.getValueAt(i, 0),
                model.getValueAt(i, 1),
                model.getValueAt(i, 2),
                model.getValueAt(i, 3),
                model.getValueAt(i, 4),
                model.getValueAt(i, 5)
            });
        }
    }

    model.setRowCount(0);
    for (Object[] row : foundRows) {
        model.addRow(row);
    }

    if (foundRows.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No se encontraron resultados para: " + searchTerm);
        loadIncomes(); 
    }
    }//GEN-LAST:event_btnBuscarActionPerformedActionPerformed
    private void recalculateTotal(DefaultTableModel model) {
    float totalSum = 0;

    for (int i = 0; i < model.getRowCount() - 1; i++) {
        totalSum += Float.parseFloat(model.getValueAt(i, 5).toString().replace(",", ""));
    }

    model.setValueAt(String.format("%.2f", totalSum), model.getRowCount() - 1, 5);
}
    private Double parseDouble(Object value) {
        try {
            return Double.parseDouble(value.toString().replace(",", ""));
        } catch (NumberFormatException e) {
            return 0.0;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmIncomes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmIncomes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmIncomes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmIncomes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmIncomes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnBuscarActionPerformed;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnGenerateReportExcel;
    private javax.swing.JButton btnGenerateReportPdf;
    private javax.swing.JButton btnGoBackToMain;
    private javax.swing.JComboBox<String> cmbAlphabeticalOrder;
    private javax.swing.JComboBox<String> cmbNumericalOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblTotalIncomes;
    // End of variables declaration//GEN-END:variables
}
